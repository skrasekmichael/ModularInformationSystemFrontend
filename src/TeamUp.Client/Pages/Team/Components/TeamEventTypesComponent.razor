@rendermode InteractiveAuto

@inherits CancellableComponent

@inject IToastService ToastService
@inject IDialogService DialogService
@inject TeamService TeamService

<div class="d-flex align-center w-100" style="margin-left: 3px">
	<h4 class="padding-small no-margin">Event Types</h4>
	<FluentSpacer />
	@if (TeamContext.Role.CanManipulateEventTypes())
	{
		<FluentButton Appearance="Appearance.Accent" OnClick="CreateEventTypeAsync">New Event Type</FluentButton>
	}
</div>
<FluentDataGrid Items="@(TeamContext.Team.EventTypes.AsQueryable())">
	<PropertyColumn IsDefaultSortColumn="true" Property="@(p => p.Name)" Title="Name" Class="content-center" />
	<PropertyColumn Property="@(p => p.Description)" Title="Description" Class="content-center" />
	@if (TeamContext.Role.CanManipulateEventTypes())
	{
		<TemplateColumn Title="Action" Class="content-center" Align="Align.Center">
			<FluentButton IconStart="@(new Icons.Filled.Size20.Delete())" Appearance="Appearance.Accent" />
			<FluentButton IconStart="@(new Icons.Filled.Size20.Edit())" Appearance="Appearance.Accent" />
		</TemplateColumn>
	}
</FluentDataGrid>

@code
{
	[CascadingParameter]
	public TeamContext TeamContext { get; set; } = null!;

	private IDialogReference? dialog;

	private CreateEventTypeInput eventTypeInput = new()
	{
		Name = "",
		Description = ""
	};

	public async Task CreateEventTypeAsync()
	{
		dialog = await DialogService.ShowPanelAsync<CreateEventTypePanel>(eventTypeInput, new DialogParameters<CreateEventTypeInput>()
		{
			Content = eventTypeInput,
			Alignment = HorizontalAlignment.Right,
			Title = $"Create Event type",
			PrimaryAction = "Create",
			SecondaryAction = "Cancel",
		});

		if ((await dialog.Result).Cancelled)
		{
			eventTypeInput.Reset();
			return;
		}

		var result = await TeamService.CreateEventTypeAsync(TeamContext.TeamId, new UpsertEventTypeRequest
		{
			Name = eventTypeInput.Name,
			Description = eventTypeInput.Description
		}, CTS.Token);

		if (result.IsFailure)
		{
			ToastService.ShowError(result.Error.Message);

			if (result.Error is ApiValidationError error)
			{
				eventTypeInput.Errors = error.Errors;
			}

			return;
		}

		eventTypeInput.Reset();

		ToastService.ShowSuccess("The event type has been created.");
	}
}

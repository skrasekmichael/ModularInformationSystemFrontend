@page "/teams/{teamGuid:guid}"

@using TeamUp.Client.Pages.Components
@using TeamUp.Client.Pages.Panels

@rendermode InteractiveAuto

@inherits CancellableComponent

@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IMessenger Messenger
@inject TeamService TeamService

<div class="body-small">
	<div class="d-flex align-center" style="margin-bottom: 16px">
		<h1 class="d-flex no-margin padding-small">@(team?.Name ?? "Team")</h1>
		<FluentButton IconStart="@(new Icons.Regular.Size20.ArrowClockwise())" Appearance="Appearance.Outline" OnClick="() => LoadTeamAsync(true)" Style="margin-top: 4px" />
	</div>
	@if (team is not null)
	{
		<TeamContext Team="team" TeamGuid="TeamGuid" Context="teamContext">
			<FluentCard Class="margin-sym">
				<TeamManagementComponent />
			</FluentCard>

			<FluentCard Class="margin-sym">
				<TeamMembersComponent />
			</FluentCard>

			<FluentCard Class="margin-sym">
				<TeamEventTypesComponent />
			</FluentCard>

			@if (teamContext.Role.CanInviteTeamMembers())
			{
				<FluentCard Class="margin-sym">
					<TeamInvitationsComponent />
				</FluentCard>
			}
		</TeamContext>
	}
</div>

@code
{
	[Parameter]
	public Guid TeamGuid { get; init; } = default!;

	private TeamResponse? team = null;

	protected override async Task OnInitializedAsync()
	{
		Messenger.Register<Team, TeamDataUpdatedMessage>(this, (self, message) =>
		{
			if (message.TeamId.Value == TeamGuid)
			{
				team = message.Team;
				StateHasChanged();
			}
		});

		await LoadTeamAsync();
	}

	private async Task LoadTeamAsync(bool forceLoad = false)
	{
		var teamResult = await TeamService.GetTeamAsync(TeamId.FromGuid(TeamGuid), forceLoad, CTS.Token);
		if (teamResult.IsSuccess)
		{
			team = teamResult.Value;
		}
		else
		{
			ToastService.ShowError(teamResult.Error.Message);
			NavigationManager.NavigateTo("/events");
		}
	}
}

@page "/login"

@rendermode InteractiveAuto

@inherits CancellableComponent

@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using BitzArt.Blazor.Cookies

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICookieService CookieService
@inject IToastService ToastService
@inject LoginService LoginService

<PageTitle>Login</PageTitle>

<div class="d-flex flex-dir-column h-screen">
	<FluentSpacer />
	<FluentCard Style="margin-bottom: 200px" Class="body-small h-auto margin-auto padding-large">
		<h1 style="margin-bottom: 16px">Login</h1>
		<FluentDivider />
		<EditForm Model="@Input" OnValidSubmit="LoginAsync" FormName="LoginForm" Style="margin-top: 16px">
			<CustomValidation @ref="ValidationComponent" />
			<FluentStack Orientation="Orientation.Vertical">
				<FluentTextField @bind-value="Input.Email" Immediate="true" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="Email" Class="w-100" />
				<FluentValidationMessage For="() => Input.Email" Class="text-danger" />

				<FluentTextField @bind-value="Input.Password" Immediate="true" AutoComplete="current-password" Required="true" Placeholder="password" Label="Password" type="password" Class="w-100" />
				<FluentValidationMessage For="() => Input.Password" Class="text-danger" />

				<FluentStack Orientation="Orientation.Horizontal" Style="margin-top: 8px">
					<FluentButton Loading="processing" Type="ButtonType.Submit" Appearance="Appearance.Accent">Log in</FluentButton>
					<FluentAnchor Href="register" Appearance="Appearance.Lightweight">Register</FluentAnchor>
				</FluentStack>
			</FluentStack>
		</EditForm>
	</FluentCard>
	<FluentSpacer />
</div>

@code
{
	private bool processing = false;

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	[SupplyParameterFromForm]
	private LoginRequest Input { get; set; } = new()
	{
		Email = "",
		Password = ""
	};

	private CustomValidation ValidationComponent { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		if (state.User.Identity?.IsAuthenticated == true)
		{
			Redirect();
		}
	}

	public async Task LoginAsync()
	{
		processing = true;
		var result = await LoginService.LoginAsync(Input, CTS.Token);
		if (result.IsFailure)
		{
			if (result.Error is ApiValidationError error)
			{
				ValidationComponent.DisplayErrors(error.Errors);
			}

			ToastService.ShowError(result.Error.Message);
			Input.Password = "";
			processing = false;
			return;
		}

		await CookieService.SetAsync("JWT", result.Value, null, CTS.Token);
		if (AuthenticationStateProvider is ClientAuthenticationStateProvider persistAuthProvider)
		{
			persistAuthProvider.Login(result.Value);
			await LoginService.ValidateCacheAsync(CTS.Token);
			Redirect();
			return;
		}

		await LoginService.ValidateCacheAsync(CTS.Token);
		Redirect(true);
	}

	private void Redirect(bool forceLoad = false) => NavigationManager.NavigateTo(ReturnUrl ?? "/", forceLoad);
}
